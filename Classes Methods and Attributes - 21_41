Class: 
	Methods:
		Attributes:
		--> SuggestedName
EStateAttack.h: // Class in control of the enemy when attacking. --> EnemyStateAttack.h
	EStateAttack: // The constructor. Reference to the enemy. --> EnemyStateAttack
		enemy_: // The actual enemy.
	~EStateAttack: // The destructor.--> ~EnemyStateAttack
	enter: // The enemy enter on attack state.
	exit: // The enemy exit of attack state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

EStateCurious.h: // Class in control of the enemy when curious. --> EnemyStateCurious.h
	EStateCurious: //The constructor. Reference to the enemy. --> EnemyStateCurious
		enemy_: // The actual enemy.
	~EStateCurious: // The destructor. --> ~EnemyStateCurious
	enter: // The enemy enter on curious state.
	exit: // The enemy exit of curious state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

		timeElapsed: // The amount of time that the enemy spent on the state.

EStateDead.h: // Class in control of the enemy when dead. --> EnemyStateDead.h
	EStateDead: // The constructor. Reference to the enemy. --> EnemyStateDead
		enemy_: // The actual enemy.
	~EStateDead: // The destructor. --> ~EnemyStateDead
	enter: // The enemy enter on dead state.
	exit: // The enemy exit of dead state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

EStateIdle.h: // The constructor. Reference to the enemy. --> EnemyStateIdle.h
		enemy_: // The actual enemy.
	~EStateIdle: // The destructor. --> ~EnemyStateIdle
	enter: // The enemy enter on idle state.
	exit: // The enemy exit of idle state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

EStatePatrolling.h: // The constructor. Reference to the enemy. --> EnemyStatePatrolling.h
		enemy_: // The actual enemy.
	~EnemyStatePatrolling: // The destructor. --> ~EnemyStatePatrolling
	enter: // The enemy enter on patrolling state.
	exit: // The enemy exit of patrolling state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

		direction: // The movement direction of the enemy.

FadeHandler.h: // Controller of the fade of the screen.
		sprite_:// Handles the fade.
	~FadeHandler: // The destructor.
	fadeIn: // Fades in.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
	fadeOut: // Fades out.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
	update: // Updates the sprite.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	getCurrentPercentage: // Gets the current percentage of fading.

		shouldFadeIn: // Boolean for when to fade in
		shouldFadeOut: // Boolean for when to fade out
		percentageOfStop: // The amount of percentage of fade to stop.
		sprite: // The sprite to use on the animation.
		time: // The time of fade.
		currentPercentage: // The percentage of fade.
		rate: // The rate of fade.

FadeScreen.h: // Fades the screen.
	~FadeScreen: // The destructor.
	update: // Updates the screen.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	render: // Renders the image.
	isFaded: // Check if the screen is faded.
	fadeOut: // Fades out.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
	fadeIn: // Fades in.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
		
		fadeImage: // Image to be faded.
		fadeHandler: // Handler of the fade.

FPSWrapper.h: // Wraps FPS handling in a class. Uses SDL2_GFX. --> FramesPerSecondWrapper.h
	initialize: // Initializes FPS managing.
		fpsManager_: // The FPS manager to handle.
	delay: // Delays execution and calculate FPS.
		fpsManager_: // The FPS manager to handle.
