Class: 
	Methods:
		Attributes:
		--> SuggestedName
EStateAttack.h: // Class in control of the enemy when attacking. --> EnemyStateAttack.h
	EStateAttack: // The constructor. Reference to the enemy. --> EnemyStateAttack
		enemy_: // The actual enemy.
	~EStateAttack: // The destructor.--> ~EnemyStateAttack
	enter: // The enemy enter on attack state.
	exit: // The enemy exit of attack state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

EStateCurious.h: // Class in control of the enemy when curious. --> EnemyStateCurious.h
	EStateCurious: //The constructor. Reference to the enemy. --> EnemyStateCurious
		enemy_: // The actual enemy.
	~EStateCurious: // The destructor. --> ~EnemyStateCurious
	enter: // The enemy enter on curious state.
	exit: // The enemy exit of curious state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

		timeElapsed: // The amount of time that the enemy spent on the state.

EStateDead.h: // Class in control of the enemy when dead. --> EnemyStateDead.h
	EStateDead: // The constructor. Reference to the enemy. --> EnemyStateDead
		enemy_: // The actual enemy.
	~EStateDead: // The destructor. --> ~EnemyStateDead
	enter: // The enemy enter on dead state.
	exit: // The enemy exit of dead state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

EStateIdle.h: // The constructor. Reference to the enemy. --> EnemyStateIdle.h
		enemy_: // The actual enemy.
	~EStateIdle: // The destructor. --> ~EnemyStateIdle
	enter: // The enemy enter on idle state.
	exit: // The enemy exit of idle state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

EStatePatrolling.h: // The constructor. Reference to the enemy. --> EnemyStatePatrolling.h
		enemy_: // The actual enemy.
	~EnemyStatePatrolling: // The destructor. --> ~EnemyStatePatrolling
	enter: // The enemy enter on patrolling state.
	exit: // The enemy exit of patrolling state.
	update: // Update the state of the Enemy.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.

		direction: // The movement direction of the enemy.

FadeHandler.h: // Controller of the fade of the screen.
		sprite_:// Handles the fade.
	~FadeHandler: // The destructor.
	fadeIn: // Fades in.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
	fadeOut: // Fades out.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
	update: // Updates the sprite.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	getCurrentPercentage: // Gets the current percentage of fading.

		shouldFadeIn: // Boolean for when to fade in
		shouldFadeOut: // Boolean for when to fade out
		percentageOfStop: // The amount of percentage of fade to stop.
		sprite: // The sprite to use on the animation.
		time: // The time of fade.
		currentPercentage: // The percentage of fade.
		rate: // The rate of fade.

FadeScreen.h: // Fades the screen.
	~FadeScreen: // The destructor.
	update: // Updates the screen.
		dt_: // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	render: // Renders the image.
	isFaded: // Check if the screen is faded.
	fadeOut: // Fades out.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
	fadeIn: // Fades in.
		percentage_: // Percentage of fade.
		time_: // Time of fade.
		
		fadeImage: // Image to be faded.
		fadeHandler: // Handler of the fade.

FPSWrapper.h: // Wraps FPS handling in a class. Uses SDL2_GFX. --> FramesPerSecondWrapper.h
	initialize: // Initializes FPS managing.
		fpsManager_: // The FPS manager to handle.
	delay: // Delays execution and calculate FPS.
		fpsManager_: // The FPS manager to handle.

Game: // Main structure class for the game.
		SPLASH: // Game State.
		MENU: // Game State.
		NEW_GAME: // Game State.
		LEVEL_ONE: // Game State.
		LEVEL_TWO: // Game State.
		LEVEL_THREE: // Game State.
		LEVEL_FOUR: // Game State.
		LEVEL_FIVE: // Game State.
		LEVEL_BOSS: // Game State.
		CONTINUE: // Game State.
		OPTIONS: // Game State.
		CREDITS: // Game State.
		GAMEOVER: // Game State.
		TRANSITION: // Game State.
		VICTORY: // Game State.
	instance: // Singleton implementation for Game. @return the instance for a Game.
	~Game: // The Destructor of the Game. --> ~GameDestructor
	runGame: // The main Game loop.
	setState: // Sets the current state of the Game.
		state_: // The state you want to be changed into.
	getAudioHandler: // Return the Game audioHandler.
	getInput: // Return the boolean array received from the InputHandler.
	getResources: // The Resource manager.
	getFade: // The Fade manager.
	getSaves: // The Save manager.
	stop: // Stop the execution of the Game. --> stopGame
	clearKeyFromInput: // Clear the Key received from input.
		key_: // The key that will be cleared.
	resizeWindow: // Function to resize the Window.
		width_: // The width to resize.
		height_: // The height to resize.
		isCutscene: // Check if the state is at a Cutscene.
		isPaused: // Check if the state is at Pause.
		currentSlot: // The current Slot.
		numLines: // Number of Lines. 
		currentLine: // Current Number of Lines.
		dialog[numLines]: // Gets the Sprite with the dialog containing the certain amount of lines.
		transitionTo: // Make the transition to the right state.
	Game: // The constructor. Tells if it is okay to start the game. --> GameStart
	initializeStates: // Loads all states.
	destroyStates: // Delete all uploaded states.
	renderPause: // Renders screen when paused.
	isPauseable: // Check if the game is able to be paused.
	renderDialog: // Renders the dialogs.
	handleDialog: // Handles the dialogs.
	updateDialog: // Updates the dialogs.
		window: // The game Window.
		isRunning: // Whether the game is currently running/looping or not. 
		pauseImage: // Pauses the Image.
		pauseSelector: // Pauses' selector.
		audioHandler: // The Game AudioHandler.
		inputHandler: // The Game InputHandler. 
		resourceManager: // The Game ResourceManager.
		gameSave: // The Game's save fil.
		fadeScreen: // The Fade Screen.
		currentState: // The current state, which the game is in.
		statesMap: // Map containing all possible states. 
		fpsManager: // The FPSManager from SDL2_GFX. Handles the framerate capping.
	handleSelectorMenu: // Handles the Selector of the Menu.
	updatePause: // Updates the Pauses state.
		passedTime: // The time already elapsed since the beggining of the menu.
		currentSelection: // The actual position.
		selectorXPositionLeft[PSelection::TOTAL]: // The X position of the left selector.
		selectorYPositionLeft[PSelection::TOTAL]: // The Y position of the left selector.
		selectorXPositionRight[PSelection::TOTAL]: // The X position of the left selector.
		selectorYPositionRight[PSelection::TOTAL]: // The Y position of the left selector.
