Classe: 
	MÃ©todos:
		Atributos:
ImputKeys.h // Class in control of game keys and quatity of this.
		GameKeys: // A type defined.
			UP: // UP KEY
			LEFT: // DOWN KEY
			RIGHT: // RIGHT KEY
			DOWN: //DOWN KEY
			ROLL: //ROLL KEY
			SPACE: // SPACE/JUMP KEY
			CROUCH: // CROUCH KEY
			AIM: // AIM WITH MOUSE		
			ACTION: // ACTION KEY	
			LATTACK: // LETHAL ATTACK KEY		
			NLATTACK: // NO LETHAL ATTACK KEY
			ITEMS: // USE ITEM KEY
			ESCAPE: // ESCAPE KEY
			MAX: // MAX LIFE STOCK

Level.h //  Contais background, player and camera level control.
	Level: // Abstract class for levels.
	~Level: // The destructor. Deletes all the allocated attributes.
	getWidth: // Return The Level width.
	getHeight: // Return The Level height.
	Level: // The constructor.
	setPlayer: // Sets the player for the level.
		player: // reference to the player.
	setCamera: // Sets the camera for the level.
		camera: // reference to the camera.
	setBoss: // Set the boss for the level.
		boss: // reference to the boss.
	clearEnemies: // Clear enemies on the level.
	clearDocuments: // Clear documents of level.
	changeCheckpoints: // Change the current checkpoint to new checkpoint.
		NUMBER_OF_CHECKPOINTS_: // Total number of checkpoints.
		checkpointsX_: // All checkpoints in x axis.
		checkpointsY_: // All checkpoints in y axis.
		width: // Width that defines the horizontal limits.
		height: // Height that defines the vertical limits.
		checkpointsVisited: // Define if the checkpoint was visited.

LevelBoss.h // Last level of the game.
	LevelBoss: // The constructor.
	~LevelBoss: // The destructor.
	load: // Loads the level.
	update: // Updates teh objects within the level.
		dt_: // Time elapsed between one frame and the other. --> deltaTime
	unload: // Unloads everything that was loaded.
	render: // Render the level.

LevelFive.h // Fivefh level of the game.
	LevelFive: // The constructor.
	~LevelFive: // The destructor.
	load: // Loads the level.
	update: // Updates teh objects within the level.
		dt_: // Time elapsed between one frame and the other. --> deltaTime
	unload: // Unloads everything that was loaded.
	render: // Render the level.
		items[2][NUMBER_ITEMS]: // Save the position in x and y of dropped potions.
		caughtItems[NUMBER_ITEMS]: // If the item was caught.

LevelFour.h // Fourfh level of the game.
	LevelFour: // The constructor.
	~LevelFour: // The destructor.
	load: // Loads the level.
	update: // Updates teh objects within the level.
		dt_: // Time elapsed between one frame and the other. --> deltaTime
	unload: // Unloads everything that was loaded.
	render: // Render the level.
		items[2][NUMBER_ITEMS]: // Save the position in x and y of dropped potions.
		caughtItems[NUMBER_ITEMS]: // If the item was caught.

LevelOne.h // First level of the game.
	LevelOne: // The constructor.
	~LevelOne: // The destructor.
	load: // Loads the level.
	update: // Updates teh objects within the level.
		dt_: // Time elapsed between one frame and the other. --> deltaTime
	unload: // Unloads everything that was loaded.
	render: // Render the level.
		items[2][NUMBER_ITEMS]: // Save the position in x and y of dropped potions.
		caughtItems[NUMBER_ITEMS]: // If the item was caught.		

LevelThree.h // Third level of the game.
	LevelThree: // The constructor.
	~LevelThree: // The destructor.
	load: // Loads the level.
	update: // Updates teh objects within the level.
		dt_: // Time elapsed between one frame and the other. --> deltaTime
	unload: // Unloads everything that was loaded.
	render: // Render the level.
		items[2][NUMBER_ITEMS]: // Save the position in x and y of dropped potions.
		caughtItems[NUMBER_ITEMS]: // If the item was caught.

LevelTwo.h // Second level of the game.
	LevelTwo: // The constructor.
	~LevelTwo: // The destructor.
	load: // Loads the level.
	update: // Updates teh objects within the level.
		dt_: // Time elapsed between one frame and the other. --> deltaTime
	unload: // Unloads everything that was loaded.
	render: // Render the level.
		items[2][NUMBER_ITEMS]: // Save the position in x and y of dropped potions.
		caughtItems[NUMBER_ITEMS]: // If the item was caught.

Logger.h // Log of level.
	Logger: // The constructor.
	~Logger: // The destructor.
		LogLevel: // References log level.
		level_: // References level.
	levelToString: // Change level int to string.
	
LuaScript.h // Parses lua scripts into C++
	LuaScript: // Constructor.
		filename_: // Path to the desired script, i.e. "lua/level1/Player.lua .
	~LuaScript: // Destructor.
	unlua_get: // Gets value of desired variable.
		variableName_: // The varaible you want to get a value from.
	unlua_getIntVector: // Gets an int vector.
		name_: // The name of the table. --> tableName_
	unlua_getTableKeys: // Gets the keys from a table.
		name_: // The name of the table. --> tableName_
		level: // Current level.
	unlua_clean: // Clean the state.
									