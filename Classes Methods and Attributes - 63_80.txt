Classe: 
	Métodos:
		Atributos:
PStateHit.h // Class that control the player if he is hit.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PStateIdle.h // Class that control the player if he is idle.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PStateMoving.h // Class that control the player if he is moving.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PStateMovingCrouch.h // Class that control the player if he is moving while he is crouch.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PStateROlling.h // Class that control the player if he is rolling.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

QuadTree.h // Class that optmize the collisions by limiting them to close tiles.
	QuadTree // The Constructor, sets level and the bounds of the tile.
	split // indentifies the 4 tiles that the reference tile can be touching and add them to nodes.
	getIndex // returns the position of the possible touching tile.
	insert // recursivaly fill the collision tiles array til the max size.
	retrieve // Return the possible tiles to collide.
		returnObjects_ // Stores the array with the possible collision tiles.
	setObjects // Set the objects to collide.

