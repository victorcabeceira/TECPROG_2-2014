Classe: 
	Métodos:
		Atributos:
PStateHit.h // Class that control the player if he is hit.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PlayerStateIdle.h // Class that control the player if he is idle.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PStateMoving.h // Class that control the player if he is moving.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PStateMovingCrouch.h // Class that control the player if he is moving while he is crouch.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

PStateROlling.h // Class that control the player if he is rolling.
	enter: // Run in the beggining of the player state, should do initialization.
	exit: // Run in the end of the execution of the player state, should deallocate everything.
	handleInput // Is called 60 times per second, do the logic of the state.
	PStateHit // The Constructor, sets the player to the state.
		player_: // reference to player.

QuadTree.h // Class that optmize the collisions by limiting them to close tiles.
	QuadTree // The Constructor, sets level and the bounds of the tile.
	split // indentifies the 4 tiles that the reference tile can be touching and add them to nodes.
	getIndex // returns the position of the possible touching tile.
	insert // recursivaly fill the collision tiles array til the max size.
	retrieve // Return the possible tiles to collide.
		returnObjects_ // Stores the array with the possible collision tiles.
	setObjects // Set the objects to collide.

ResourceManager.h // Class that retrieves all the image resource of the game.
	ResourceManager // The Constructor. 
	~ResourceManager // The Destructor. 
	get // Returns a pointer from the type Sprite of the path.
	registerResource // Include a resource into the resources array.
	unregisterResource // Exclude a resource from the resources array.
	load // Loads a new Sprite from a path.

SDLWrapper.h // Class that initializes everything about SDL.
	initialize // Initializes SDL libraries.
		successSDL // boolean that stores if SDL 2.0 was initialized correctly.
		successIMG // boolean that stores if SDL image was initialized correctly.
		successMixer // boolean that stores if SDL mixer was initialized correctly.
		successTTF // boolean that stores if SDL ttf was initialized correctly.
	close // Closes everything that was initialized.
	logSDLVersion // A print with all used SDL versions.

Sprite.h // Class that loads and stores the images of the game.
	Sprite // The constructor, receive a path to load the image, overloaded with a surface to show the image.
		path_ // Path to load the image.
		surface_ // Place where the image will be rendered.
	~Sprite // The Destructor.
	loadFrom // Loads a image into a surface.
		loadedSurface // check if the surface was loaded.
		sdlTexture // texture to render a image.
	render // Draw a image in a given position.
		renderQuad // Square to be rendered. --> squareToRender
	surfaceToTexture // Transform a surface to a texture.

StateBoss.h // Father Class of boss's states.
	StateBoss // The Constructor, sets the boss.
	~StateBoss // The Destructor.

StateEnemy.h// Father Class of enemy's states.
	StateEnemy// The Constructor, sets the enemy.
	~StateEnemy // The Destructor.

StateGame.h// Father Class of game states.
	StateGame // The Constructor.
	addEntity // Add a element in the entities structure.
	cleanEntities // Remove all the elements from the entities structure.

StatePlayer.h// Father Class of player's states.
	StatePlayer // The Constructor, sets the player.
	~StatePlayer // The Destructor.
