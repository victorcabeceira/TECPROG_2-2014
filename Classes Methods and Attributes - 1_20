Classe: 
	MÃ©todos:
		Atributos:
Animation.h: // Class in control of animating a sprite.
	Animation: // The constructor. Initializes all atributes.
		x_: // The x position on the spritesheet.
		y_: // The y position on the spritesheet.
		SpriteWidth_ : // The width of the sprite to animate.
		SpriteHeight_ : // The height of the sprite to animate.
		numberOfImages_ : // The number of images to animate inside the spritesheet.
		loop_: // Whether to loop the animation or not.
	~Animation: // The Destructor.
	update: // Updates the animation clip.
		clip_ : // Reference to the clip of whatever object the animation is a part of.
		deltaTime_ : // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	getCurrentFrame: // Gets the current frame of the animation.
	changeWidthHeight: // Changes the width and the height of the animation.
		width_ : // Width that needs to be changed.
		height_: // Height that needs to be changed.
	changeAnimation: // Changes the animation to another.
		x_: // The x position on the spritesheet.
		y_: // The y position on the spritesheet.
		SpriteWidth_ : // The width of the sprite to animate.
		SpriteHeight_ : // The height of the sprite to animate.
		numberOfImages_ : // The number of images to animate inside the spritesheet.
		loop_: // Whether to loop the animation or not.
		totalTime_ : // How much time each frame should have. Affects the speed on which the animation changes.
	updateClip: // Updates the clip to a new position.
		clip_ : // Clip to be updated.
		x_ : // New x position.
		y_ : // New y position.

AudioHandler.h: // Class that handles all the audio in the game. Is a singleton, so should be called in each state.
	AudioHandler : // The constructor.
	~AudioHandler : // The destructor.
	playMusic : // Plays the current music.
		times_ : // Times to loop the song. MIX_LOOP (or -1) for infinite looping.
	playEffect : // Plays the current effect.
		times_ : // Times to loop the song. MIX_LOOP (or -1) for infinite looping.
	stopMusic : // Stops the current Music
	setMusicVolume : // Sets the volume for the music.
		percent_ : // The volume percentage (0-100).
	setEffectVolume : // Sets the volume for the effect.
		percent_ : // The volume percentage (0-100).
	changeMusic : // Changes current music.
		path_ : // Path to the desired music.
	setCurrentMusic : // Sets the current music.
		path_ : // Path to the desired music.
	setCurrentEffect : // Sets the current effect.
		path_ : // Path to the desired effect.
	clearChannel : // Clear the current channel.
		channel_ : // The channel to be cleared.
	channelDone : // Notifies AudioHandler instance when channel is done playing. 
	-> Suggested Name: notifiesChannelDone
		channel_ : // The channel to be checked.

BossStateAttack.h // Boss's State of Attack -> Suggested Name: BossStateAttack
	BossStateAttack : // The constructor.
		boss_ : // Reference to the boss.
	~BossStateAttack : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BossStateIcePrision.h // Boss's State of the attack Ice Prision -> Suggested Name: BossStateIcePrision
	BossStateIcePrision : // The constructor.
		boss_ : // Reference to the boss.
	~BossStateIcePrision : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BossStateIdle.h // Boss's State of being Idle -> Suggested Name: BossStateIdle
	BossStateIdle : // The constructor.
		boss_ : // Reference to the boss.
	~BossStateIdle : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BossStateMagicProjectile.h // Boss's State of the attack Magic Projectile -> Suggested Name: BossStateMagicProjectile
	BossStateMagicProjectile : // The constructor.
		boss_ : // Reference to the boss.
	~BossStateMagicProjectile : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BossStateShield.h // Boss's State of the Shield -> Suggested Name: BossStateShield
	BossStateShield : // The constructor.
		boss_ : // Reference to the boss.
	~BossStateShield : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BossStateTeleport.h // Boss's State of the attack Teleport -> Suggested Name: BossStateTeleport
	BossStateTeleport : // The constructor.
		boss_ : // Reference to the boss.
	~BossStateTeleport : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

Boss.h // The Boss of the game.
	Boss : // The constructor.
		x_ : // Boss's x position.
		y_ : // Boss's y position.
		path_ : // Path to sprite image of the Boss.
		player_ : // The player.
	~Boss : // The destructor.
	update : // Updates the player.
		deltaTime_ : // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	initializEnemyStates : // Initializes Boss's States.
	destroyStates : // Destroy Boss's States.
	changEnemyStates : // Changes the Boss's States. 
		state_ : // State that will replace former state.
	render : // Renders the player.
		cameraX_ : // The x position of the camera.
		cameraY_ : // The y position of the camera.	
	usePotion : // Uses a potion.
	getAnimation: // Gets the Boss's animation.
	isDead: // Checks if the Boss is dead.
	setDead: // Sets the Boss Dead.
	randomSkill : // Uses a randomSkill.
	teleport : // Uses the teleport skill.
	magicProjectile : // Uses the magic projectile skill.
	invokeWind : // Uses the invoke wind skill.
	icePrision : // Uses the icePrision skill.
	finalSplendor : // Uses the final splendor skill.
	updateBoundingBox : // Updates the boss's bounding box.
	handleCollision : // Handles collision with the boss.

Camera.h : // The camere of the game. Contains all relevant implementation relative to the camera.
	Camera : // The constructor.
		entity_ : // The entity to centralize the camera on.
	~Camera : // The destructor.
	update : // Updates the camera centralizing the player on the screen.
	centralizeOn : // Changes the entity to centralize upon.
		entity_ : // The entity to centralize the camera on.
	getClip : // Gets the camera clip.
	setlevelWidthH : // Sets the level Width and Height. -> Suggested Name : setlevelWidthidthHeight
		width_ : // Tells the camera what the width of the level is.
		height_ : // Tells the camera what the height of the level is.
	updatePosition : // Updates the camera's position based on player's position.

Collision.h : // Simple Collision detection.
	rectsCollided : // Whether two SDL_Rects collided.
		a_ : // Rectangle to check.
		b_ : // Rectangle to check.
	rectsCollidedSide : // The side which two SDL_Rects collided on
		a_ : // Rectangle to check.
		b_ : // Rectangle to check.

CollisionRect.h : // 

Configuration.h : // Game configuration class.
		initialize : // Initializes all the attributes.
		getResolutionWidth : // Gets the Resolution Width.
		getResolutionHeight : // Gets the Resolution Height.
		getMaxFramerate : // Gets the Maximum Framerate.
		getWindowTitle : // Gets the Window Title.
		getLogicalRenderSize : // Gets the logical render size.
		getCameraDistanceWidth : // Gets the camera distance width.
		getCameraDistanceHeight : // Gets the camera distance height.
		getScreenWidth : // Gets the Screen Width.
		getScreenHeight : // Gets the Screen Height. 

ControllerHandler.h : // The input handler for joysticks
	ControllerHandler : // The constructor.
	handleInput : // Handles the controller input.
		sdlEvent_ : // The SDL internal event structure.

Crosshair.h : // Target of the potion.
	Crosshair : // Targets the potion.
		x_ : // x position of the target.
		y_ : // y position of the target.
		path_ : // Path to the sprite image of the target

Document.h : // 	
	Document : // The constructor.
		x_ : // X position of the document.
		y_ : // Y position of the document.
		path_ : // Path to the sprite image of the document.
		pathDocumentText_ : // Path to the document text.
	~Document : // The destructor.
	update : // Updates the document.
		deltaTime_ : // Delta time.
	render : // Renders the animation of the document.
		cameraX_ : // camera in the x position.
		cameraY_ : // camera in the y position.
	renderDocumentText : // Renders the document text.

DynamicEntity.h : // Subclass of entity. The objects of this class are entities, but have physics applied to them
	DynamicEntity : // The constructor.
		x_ : // X position of the entity.
		y_ : // Y position of the entity.
		path_ : // Path of the Entity's sprite.
	~DynamicEntity : // The destructor.
	jump : // Make the entity jump.
	applyGravity : // Applies gravity to entity.
	move : // Moves the entity.
		movingLeft_ : // If the entity if moving left.
		movingRight_ : // If the entity if moving right.
	move Vertical : // Moves the entity vertically.
		movingUp_ : // If the entity if moving up.
		movingDown_ : // If the entity if moving down.
	slowVx : // Slows the entity on x axis.
	slowVy : // Slows the entity on y axis.
	roll : // Make the entity roll.
	aim : // Aim the potions.
		crosshair : // The crosshair of the aim.
		direction : // The direction of the aim.
	setlevelWidthH : // Sets the level width and height.
		width_ : // Tells the player what the width of the level is.
		height_ : // Tells the player what the height of the level is.
	updatePosition : // Updates the position of the dynamic entity.
		deltaTime_ : // Time elapsed between one frame and the other, independent of processing speed.
	scoutPosition : // Scouts the position of the dynamic entity.
		deltaTime_ : // Time elapsed between one frame and the other, independent of processing speed.	
	detectCollision : // Detects the collision.
	getFlip : // 
	updateBoundingBox : // Updates the bounding box of the entity.

EnemyStateAerial.h : // Enemy State Aerial.
	EnemyStateAerial : // The constructor.
		enemy_ : // Reference to the enemy.
	~EnemyStateAerial : // The destructor.
	enter : // @see StateEnemy::enter.
	exit : // @see StateEnemy::exit.
	update : // @see StateEnemy::update.

EnemyStateAlert.h : // Enemy State of being Alert.
	EnemyStateAlert : // The constructor.
		enemy_ : // Reference to the enemy.
	~EnemyStateAlert : // The destructor.
	enter : // @see StateEnemy::enter.
	exit : // @see StateEnemy::exit.
	update : // @see StateEnemy::update.