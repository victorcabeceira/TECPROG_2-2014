Classe: 
	MÃ©todos:
		Atributos:
Animation.h: // Class in control of animating a sprite.
	Animation: // The constructor. Initializes all atributes.
		x_: // The x position on the spritesheet.
		y_: // The y position on the spritesheet.
		SpriteWidth_ : // The width of the sprite to animate.
		SpriteHeight_ : // The height of the sprite to animate.
		numberOfImages_ : // The number of images to animate inside the spritesheet.
		loop_: // Whether to loop the animation or not.
	~Animation: // The Destructor.
	update: // Updates the animation clip.
		clip_ : // Reference to the clip of whatever object the animation is a part of.
		dt_ : // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	getCurrentFrame: // Gets the current frame of the animation.
	changeWidthHeight: // Changes the width and the height of the animation.
		width_ : // Width that needs to be changed.
		height_: // Height that needs to be changed.
	changeAnimation: // Changes the animation to another.
		x_: // The x position on the spritesheet.
		y_: // The y position on the spritesheet.
		SpriteWidth_ : // The width of the sprite to animate.
		SpriteHeight_ : // The height of the sprite to animate.
		numberOfImages_ : // The number of images to animate inside the spritesheet.
		loop_: // Whether to loop the animation or not.
		totalTime_ : // How much time each frame should have. Affects the speed on which the animation changes.
	updateClip: // Updates the clip to a new position.
		clip_ : // Clip to be updated.
		x_ : // New x position.
		y_ : // New y position.

AudioHandler.h: // Class that handles all the audio in the game. Is a singleton, so should be called in each state.
	AudioHandler : // The constructor.
	~AudioHandler : // The destructor.
	playMusic : // Plays the current music.
		times_ : // Times to loop the song. MIX_LOOP (or -1) for infinite looping.
	playEffect : // Plays the current effect.
		times_ : // Times to loop the song. MIX_LOOP (or -1) for infinite looping.
	stopMusic : // Stops the current Music
	setMusicVolume : // Sets the volume for the music.
		percent_ : // The volume percentage (0-100).
	setEffectVolume : // Sets the volume for the effect.
		percent_ : // The volume percentage (0-100).
	changeMusic : // Changes current music.
		path_ : // Path to the desired music.
	setCurrentMusic : // Sets the current music.
		path_ : // Path to the desired music.
	setCurrentEffect : // Sets the current effect.
		path_ : // Path to the desired effect.
	clearChannel : // Clear the current channel.
		channel_ : // The channel to be cleared.
	channelDone : // Notifies AudioHandler instance when channel is done playing. 
	-> Suggested Name: notifiesChannelDone
		channel_ : // The channel to be checked.

BStateAttack.h // Boss's State of Attack -> Suggested Name: BossStateAttack
	BStateAttack : // The constructor.
		boss_ : // Reference to the boss.
	~BStateAttack : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BStateIcePrision.h // Boss's State of the attack Ice Prision -> Suggested Name: BossStateIcePrision
	BStateIcePrision : // The constructor.
		boss_ : // Reference to the boss.
	~BStateIcePrision : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BStateIdle.h // Boss's State of being Idle -> Suggested Name: BossStateIdle
	BStateIdle : // The constructor.
		boss_ : // Reference to the boss.
	~BStateIdle : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BStateMagicProjectile.h // Boss's State of the attack Magic Projectile -> Suggested Name: BossStateMagicProjectile
	BStateMagicProjectile : // The constructor.
		boss_ : // Reference to the boss.
	~BStateMagicProjectile : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BStateShield.h // Boss's State of the Shield -> Suggested Name: BossStateShield
	BStateShield : // The constructor.
		boss_ : // Reference to the boss.
	~BStateShield : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

BStateTeleport.h // Boss's State of the attack Teleport -> Suggested Name: BossStateTeleport
	BStateTeleport : // The constructor.
		boss_ : // Reference to the boss.
	~BStateTeleport : // The destructor.
	enter : // @see StateBoss::enter.
	exit : // @see StateBoss::exit.
	update : // @see StateBoss::update.

Boss.h // The Boss of the game.
	Boss : // The constructor.
		x_ : // Boss's x position.
		y_ : // Boss's y position.
		path_ : // Path to sprite image of the Boss.
		player_ : // The player.
	~Boss : // The destructor.
	update : // Updates the player.
		dt_ : // Delta time. Time elapsed between one frame and the other, independent of processing speed.
	initializeStates : // Initializes Boss's States.
	destroyStates : // Destroy Boss's States.
	changeStates : // Changes the Boss's States. 
		state_ : // State that will replace former state.
	render : // Renders the player.
		cameraX_ : // The x position of the camera.
		cameraY_ : // The y position of the camera.	
	usePotion : // Uses a potion.
	getAnimation: // Gets the Boss's animation.
	isDead: // Checks if the Boss is dead.
	setDead: // Sets the Boss Dead.
	randomSkill : // Uses a randomSkill.
	teleport : // Uses the teleport skill.
	magicProjectile : // Uses the magic projectile skill.
	invokeWind : // Uses the invoke wind skill.
	icePrision : // Uses the icePrision skill.
	finalSplendor : // Uses the final splendor skill.
	updateBoundingBox : // Updates the boss's bounding box.
	handleCollision : // Handles collision with the boss.

Camera.h // The camere of the game. Contains all relevant implementation relative to the camera.
	Camera : // The constructor.
		entity_ : // The entity to centralize the camera on.
	~Camera : // The destructor.
	update : // Updates the camera centralizing the player on the screen.
	centralizeOn : // Changes the entity to centralize upon.
		entity_ : // The entity to centralize the camera on.
	getClip : // Gets the camera clip.
	setLevelWH : // Sets the level Width and Height. -> Suggested Name : setLevelWidthHeight
		width_ : // Tells the camera what the width of the level is.
		height_ : // Tells the camera what the height of the level is.
	updatePosition : // Updates the camera's position based on player's position.
	